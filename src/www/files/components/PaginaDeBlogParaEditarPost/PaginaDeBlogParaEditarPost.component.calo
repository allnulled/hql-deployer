asigno window.PaginaDeBlogParaEditarPost como un componente vue2 con nombre "PaginaDeBlogParaEditarPost" con plantilla {
  <div class="PaginaDeBlogParaEditarPost Component">
    <div class="window">
      <div class="title-bar">
        <div class="title-bar-text">
          <table class="">
            <tbody>
              <tr>
                <td>
                  <span class="partenon" v-on:click="() => $router.history.push('/')">üèõÔ∏è</span>
                </td>
                <td>
                  <span class="">{{ modalidad === "crear" ? "Crear" : "Editar" }} post</span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div v-if="root.esquema" class="window-body">
        <BreadcrumbGenerico :root="root" :migas="[{texto:'Inicio',link:'/'},{texto:'Blog',link:'/blog/ver/posts'}]"></BreadcrumbGenerico>
        <h5>{{ modalidad === "crear" ? "Crear" : "Editar" }} post</h5>
        <div class="panel_principal">
          <div class="">
            <div class="">T√≠tulo del post:</div>
            <input style="width: 100%;" type="text" v-model="post.titulo" />
          </div>
          <div class="">
            <div class="">Subt√≠tulo del post: (opcional)</div>
            <input style="width: 100%;" type="text" v-model="post.subtitulo" />
          </div>
          <div class="">
            <div class="">Contenido:</div>
            <textarea v-model="post.contenido"></textarea>
          </div>
          <div>
            <button v-if="modalidad === 'crear'" v-on:click="() => crear_post()">Crear</button>
            <button v-else-if="modalidad === 'editar'" v-on:click="() => guardar_post()">Guardar</button>
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      root: {
        type: Object,
        required: true
      },
      modalidad: {
        type: String,
        default: "crear"
      }
    }.
    m√©todo data donde {
      retorno {
        es_administrador: false,
        post: {}
      }.
    }.
    propiedad methods como {
      m√©todo as√≠ncrono crear_post donde {
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/insert/Post_de_blog"
          con m√©todo "POST"
          con cuerpo {
            ...incluyo this.post
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        imprimo respuesta_1.
      }.
      m√©todo as√≠ncrono guardar_post donde {
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/update/Post_de_blog/" + this.$route.params.id
          con m√©todo "POST"
          con cuerpo {
            id: this.$route.params.id,
            ...incluyo this.post
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        imprimo respuesta_1.
      }.
    }.
    m√©todo as√≠ncrono mounted donde {
      si this.modalidad es igual que "editar" {
        creo post_id como this.$route.params.id.
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Post_de_blog"
          con m√©todo "POST"
          con cuerpo {
            where: [
              [ "id", "=", post_id ]
            ] textualizado
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        creo dato_1 como respuesta_1.data.resultado[0].
        si dato_1 es tipo indefinido retorno.
        asigno this.post como dato_1.
      }.
    }.
  }.
}.