asigno window.PaginaDeBlogParaVerPost como un componente vue2 con nombre "PaginaDeBlogParaVerPost" con plantilla {
  <div class="PaginaDeBlogParaVerPost Component">
    <div class="window">
      <div class="title-bar">
        <div class="title-bar-text">
          <table class="">
            <tbody>
              <tr>
                <td>
                  <span class="partenon" v-on:click="() => $router.history.push('/')">üèõÔ∏è</span>
                </td>
                <td>
                  <span class="">Ver post</span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div class="window-body">
        <BreadcrumbGenerico :root="root" :migas="[{texto:'Inicio',link:'/'},{texto:'Blog',link:'/blog/ver/posts'}]"></BreadcrumbGenerico>
        <h5>Ver post</h5>
        <div class="panel_principal">
          <div class="panel_de_botones_superior" v-if="es_administrador">
            <button v-on:click="() => ir_a_editar_post()">Editar post</button>
          </div>
          <div class="ver_post">
            <div class="titulo_de_post">{{ post_del_blog.titulo }}</div>
            <div class="subtitulo_de_post">{{ post_del_blog.subtitulo }}</div>
            <table>
              <tr>
                <td>
                  <div class="autor_de_post">Escrito por: {{ autor.nombre }}</div>
                </td>
                <td style="width: 100%;"></td>
                <td>
                  <div class="fecha_de_creacion_de_post">Creado el: {{ post_del_blog.fecha_de_creacion }}</div>
                </td>
              </tr>
            </table>
            <div class="contenido_de_post">{{ post_del_blog.contenido }}</div>
          </div>
          <div class="panel_de_comentarios" style="margin-top: 4px;">
            <div class="ver_post">
              <h5>Ver comentarios</h5>
              <div style="padding: 4px; padding-top: 0px;">
                <div class="panel_de_botones_superior" style="text-align: left;">
                  <button style="width: 100%;" v-on:click="() => abrir_creador_de_comentarios()" v-if="!esta_mostrando_creador_de_comentario">Crear comentario</button>
                  <div class="panel_de_creador_de_comentarios" v-else>
                    <div>Escribe tu comentario aqu√≠:</div>
                    <textarea v-model="nuevo_comentario" :disabled="esta_creando_comentario"></textarea>
                    <div style="text-align: right;" v-if="!esta_creando_comentario">
                      <button v-on:click="() => crear_comentario()">Subir comentario</button>
                    </div>
                    <div role="progressbar" class="animate" v-else>
                      <div style="width: 100%;"></div>
                    </div>
                  </div>
                </div>
                <div class="panel_de_botones_superior">
                  <table>
                    <tr>
                      <td>
                        <button style="min-width: auto;" v-on:click="() => id_a_principio_de_comentarios()"> ¬´¬´ </button>
                      </td>
                      <td>
                        <button style="min-width: auto;" v-on:click="() => id_a_anterior_de_comentarios()"> ¬´ </button>
                      </td>
                      <td style="width: 100%;"></td>
                      <td>
                        <button style="min-width: auto;" v-on:click="() => id_a_siguiente_de_comentarios()"> ¬ª </button>
                      </td>
                    </tr>
                  </table>
                </div>
                <template v-for="comentario, comentario_index in comentarios">
                  <div class="ver_post" style="margin-bottom: 4px;" v-bind:key="'comentario-' + comentario_index">
                    <table>
                      <tr>
                        <td>
                          <div class="autor_de_post">
                            Escrito por: {{ autores_de_comentarios[comentario.id_de_autor].nombre }}
                          </div>
                        </td>
                        <td style="width: 100%;">
                        </td>
                        <td>
                          <div class="fecha_de_creacion_de_post">
                            Creado el: {{ comentario.fecha_de_creacion }}
                          </div>
                        </td>
                      </tr>
                    </table>
                    <div class="contenido_de_post">
                      {{ comentario.contenido }}
                    </div>
                  </div>
                </template>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      root: {
        type: Object,
        required: true
      }
    }.
    m√©todo data donde {
      retorno {
        es_administrador: false,
        post_del_blog: {},
        autor: {},
        pagina_de_comentarios: 1,
        comentarios: [],
        autores_de_comentarios: {},
        esta_mostrando_creador_de_comentario: false,
        esta_creando_comentario: false,
        nuevo_comentario: ""
      }.
    }.
    propiedad methods como {
      m√©todo abrir_creador_de_comentarios donde {
        asigno this.esta_mostrando_creador_de_comentario como true.
      }.
      m√©todo as√≠ncrono crear_comentario donde {
        asigno this.esta_creando_comentario como true.
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/insert/Comentario_de_post_de_blog"
          con m√©todo "POST"
          con cuerpo {
            ...incluyo {
              id_de_post_de_blog: this.$route.params.id,
              contenido: this.nuevo_comentario
            }
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        asigno this.esta_mostrando_creador_de_comentario como false.
        asigno this.esta_creando_comentario como false.
        asigno this.nuevo_comentario como "".
        hago as√≠ncronamente this.obtener_comentarios().
        hago this.$forceUpdate(true).
      }.
      m√©todo ir_a_editar_post donde {
        hago this.$router.history.push("/blog/editar/post/" + this.$route.params.id).
      }.
      m√©todo as√≠ncrono id_a_principio_de_comentarios donde {
        asigno this.pagina_de_comentarios como 1.
        hago as√≠ncronamente this.obtener_comentarios().
      }.
      m√©todo as√≠ncrono id_a_anterior_de_comentarios donde {
        si this.pagina_de_comentarios es igual que 1 retorno.
        decremento this.pagina_de_comentarios.
        hago as√≠ncronamente this.obtener_comentarios().
      }.
      m√©todo as√≠ncrono id_a_siguiente_de_comentarios donde {
        incremento this.pagina_de_comentarios.
        creo resultados como as√≠ncronamente this.obtener_comentarios().
        si resultados es igual que 0 decremento this.pagina_de_comentarios.
      }.
      m√©todo as√≠ncrono obtener_post donde {
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Post_de_blog"
          con m√©todo "POST"
          con cuerpo {
            where: [
              ["id", "=", this.$route.params.id]
            ] textualizado
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        creo dato_1 como respuesta_1.data.resultado[0].
        creo respuesta_2 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Usuario"
          con m√©todo "POST"
          con cuerpo {
            where: [
              ["id", "=", dato_1.id_de_autor]
            ] textualizado
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        creo dato_2 como respuesta_2.data.resultado[0].
        asigno this.post_del_blog como dato_1.
        asigno this.autor como dato_2.
        hago this.$forceUpdate(true).
      }.
      m√©todo as√≠ncrono obtener_comentarios donde {
        @POR-HACER
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Comentario_de_post_de_blog"
          con m√©todo "POST"
          con cuerpo {
            where: [
              ["id_de_post_de_blog", "=", this.$route.params.id]
            ] textualizado,
            order: [
              ["id", "desc"]
            ] textualizado,
            page: this.pagina_de_comentarios
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        creo datos_1 como respuesta_1.data.resultado.
        si datos_1.length es igual que 0 retorno 0.
        creo ids_de_autores como datos_1.reduce(una funci√≥n con (salida, post) donde {
          si salida.indexOf(post.id_de_autor) es igual que 0-1 {
            hago salida.push(post.id_de_autor).
          }.
          retorno salida.
        }, []).
        creo respuesta_2 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Usuario"
          con m√©todo "POST"
          con cuerpo {
            where: [
              ["id", "IN", ids_de_autores.join(";")]
            ] textualizado
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        creo datos_2 como respuesta_2.data.resultado.
        creo autores_de_comentarios como datos_2.reduce(una funci√≥n con (salida, autor) donde {
          asigno salida[autor.id] como autor.
          retorno salida.
        }, {}).
        asigno this.comentarios como datos_1.
        asigno this.autores_de_comentarios como autores_de_comentarios.
        hago this.$forceUpdate(true).
      }.
    }.
    m√©todo as√≠ncrono mounted donde {
      en proceso averiguar_si_es_administrador {
        asigno this.es_administrador como this.root.autentificacion.permisos.reduce(una funci√≥n con (salida, permiso) donde {
            si permiso.nombre es igual que "permiso de administraci√≥n" {
              retorno true.
            }.
            retorno salida.
          }, false).
      }.
      en proceso obtener_post {
        hago this.obtener_post().
      }.
      en proceso obtener_comentarios {
        hago this.obtener_comentarios().
      }.
    }.
  }.
}.