asigno window.PaginaDeForoParaEditarTema como un componente vue2 con nombre "PaginaDeForoParaEditarTema" con plantilla {
  <div class="PaginaDeForoParaEditarTema Component">
    <div class="window">
      <div class="title-bar">
        <div class="title-bar-text">
          <table class="">
            <tbody>
              <tr>
                <td>
                  <span class="partenon" v-on:click="() => $router.history.push('/')">üèõÔ∏è</span>
                </td>
                <td>
                  <span class="">{{ modalidad === "crear" ? "Crear" : "Editar" }} tema</span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div v-if="root.esquema" class="window-body">
        <BreadcrumbGenerico :root="root" :migas="[{texto:'Inicio',link:'/'},{texto:'Foro',link:'/foro/ver/temas'}]"></BreadcrumbGenerico>
        <h5>{{ modalidad === "crear" ? "Crear" : "Editar" }} tema</h5>
        <div class="">
          <div class="campo_de_formulario">
            <div class="enunciado_de_campo_de_formulario">T√≠tulo del tema:</div>
            <input style="width: 100%;" type="text" v-model="tema.titulo" />
          </div>
          <div class="campo_de_formulario">
            <div class="enunciado_de_campo_de_formulario">Descripci√≥n del tema:</div>
            <textarea v-model="tema.descripcion"></textarea>
          </div>
          <div class="campo_de_formulario">
            <div class="enunciado_de_campo_de_formulario">Tags:</div>
            <textarea v-model="tema.tags"></textarea>
          </div>
          <div class="campo_de_formulario">
            <div class="enunciado_de_campo_de_formulario">Secci√≥n del tema:</div>
            <input style="width: 100%;" type="text" v-model="tema.seccion" />
          </div>
          <div class="campo_de_formulario">
            <div class="enunciado_de_campo_de_formulario">Orden del tema:</div>
            <input style="width: 100%;" type="text" v-model="tema.orden" />
          </div>
          <div class="panel_de_botones_inferior">
            <button v-if="modalidad === 'crear'" v-on:click="() => crear_tema()">‚ûï Crear tema</button>
            <button v-else-if="modalidad === 'editar'" v-on:click="() => guardar_tema()">üíæ Guardar tema</button>
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      root: {
        type: Object,
        required: true
      },
      modalidad: {
        type: String,
        default: "crear"
      }
    }.
    m√©todo data donde {
      retorno {
        es_administrador: false,
        tema: {
          id_de_tema: this.$route.params.tema
        }
      }.
    }.
    propiedad methods como {
      m√©todo as√≠ncrono crear_tema donde {
        debugo "PaginaDeForoParaEditarTema.crear_tema".
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/insert/Tema_de_foro"
          con m√©todo "POST"
          con cuerpo {
            ...incluyo this.tema
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_1, this).
        imprimo respuesta_1.
        hago this.$router.history.push("/foro/ver/temas").
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono guardar_tema donde {
        debugo "PaginaDeForoParaEditarTema.guardar_tema".
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/update/Tema_de_foro/" + this.$route.params.id
          con m√©todo "POST"
          con cuerpo {
            id: this.$route.params.id,
            ...incluyo this.tema
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_1, this).
        imprimo respuesta_1.
        hago this.$router.history.push("/foro/ver/tema/" + this.tema.id).
      } en errores hago this.$window.$notificaciones.notificar_error(error).
    }.
    m√©todo as√≠ncrono mounted donde {
      debugo "PaginaDeForoParaEditarTema.mounted".
      si this.modalidad es igual que "editar" {
        creo tema_id como this.$route.params.id.
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Tema_de_foro"
          con m√©todo "POST"
          con cuerpo {
            where: [
              [ "id", "=", tema_id ]
            ] textualizado
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_1, this).
        creo dato_1 como respuesta_1.data.resultado[0].
        si dato_1 es tipo indefinido retorno.
        asigno this.tema como dato_1.
      } pero si this.modalidad es igual que "crear" {
        asigno this.tema.id_de_tema como this.$route.params.tema.
      }.
    } en errores hago this.$window.$notificaciones.notificar_error(error).
  }.
}.