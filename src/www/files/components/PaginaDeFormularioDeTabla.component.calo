asigno window.PaginaDeFormularioDeDatoDeTabla como un componente vue2 con nombre "PaginaDeFormularioDeDatoDeTabla" con plantilla {
  <div class="PaginaDeFormularioDeDatoDeTabla Component">
    <div class="window">
      <div class="title-bar">
        <div class="title-bar-text">
          <table class="">
            <tbody>
              <tr>
                <td>
                  <span class="partenon" v-on:click="() => $router.history.push('/')">üèõÔ∏è</span>
                </td>
                <td>
                  <span>Formulario de tabla</span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div class="window-body">
        <BreadcrumbGenerico :root="root" :migas="[{texto:'Inicio',link:'/'},{texto:'Administraci√≥n',link:'/administracion'},{texto:'Explorador',link:'/explorador/'+tabla_id}]"></BreadcrumbGenerico>
        <h5>{{ $window.utilidades.texto_humanizado(tabla_id) }}: {{ $route.params.id_de_fila || "nuevo" }}</h5>
        <div v-if="fila" style="padding: 4px; padding-top: 0px;">
          <div class="" v-for="columna, columna_index in columnas_locales" v-bind:key="'formulario-columna-'+columna_index">
            <div class="columna_del_formulario">
              <div v-if="columna_index === 'id'">
                <label>ID: <span>{{ fila[columna_index] }}</span></label>
              </div>
              <div v-else-if="columna_index in columnas_foraneas">
                <div>{{ $window.utilidades.texto_humanizado_de_columna(root.esquema, tabla_id, columna_index) }}:</div>
                <ExploradorDeDatos :root="root" es-seleccionable="1" :id-de-tabla="columnas_foraneas[columna_index].tabla_foranea" :al-cambiar="v => fila[columna_index] = v[0]" :seleccion-por-defecto="fila[columna_index]" />
              </div>
              <div v-else-if="columna_index in columnas_fichero">
                <form enctype="multipart/form-data">
                  <div>{{ $window.utilidades.texto_humanizado_de_columna(root.esquema, tabla_id, columna_index) }}:</div>
                  <input class="inputfile" type="file" v-on:change="evento => cambiar_fichero(columna_index, evento)" />
                  <div v-if="columnas_fichero_cargando[columna_index] !== true">
                    <img class="inputfileimage" :src="'/api/v1/getfile/' + tabla_id + '/?columna=' + columna_index + '&id=' + fila.id + '&nocache=' + new Date()"  v-on:click="() => refrescar_imagen(columna_index)" />
                  </div>
                </form>
              </div>
              <div v-else>
                <div>{{ $window.utilidades.texto_humanizado_de_columna(root.esquema, tabla_id, columna_index) }}:</div>
                <template v-if="columna.tipo === 'VARCHAR'">
                  <template v-if="$window.utilidades.busco_atributo_en_columna(columna, 'es_opcion')">
                    <select class="entrada_de_formulario" v-model="fila[columna_index]">
                      <option v-for="opcion, opcion_index in $window.utilidades.busco_atributo_en_columna(columna, 'es_opcion').split('|')" v-bind:key="'tabla-' + tabla.tabla + '-columna-' + columna.columna + '-opcion-' + opcion_index" :value="opcion">
                        {{ opcion }}
                      </option>
                    </select>
                  </template>
                  <template v-else>
                    <input class="entrada_de_formulario" type="text" v-model="fila[columna_index]" />
                  </template>
                </template>
                <template v-else-if="columna.tipo === 'INTEGER'">
                  <input class="entrada_de_formulario" type="number" v-model="fila[columna_index]" />
                </template>
                <template v-else-if="columna.tipo === 'REAL'">
                  <input class="entrada_de_formulario" type="number" v-model="fila[columna_index]" />
                </template>
                <template v-else-if="columna.tipo === 'DATETIME'">
                  <input class="entrada_de_formulario" type="date" v-model="fila[columna_index]" />
                </template>
                <template v-else>
                  <textarea class="entrada_de_formulario" v-model="fila[columna_index]"></textarea>
                </template>
              </div>
            </div>
          </div>
          <div class="columna_del_formulario text_align_right">
            <button v-on:click="eliminar_fila">Eliminar</button>
            <button v-on:click="buscar_fila">Cargar</button>
            <button v-on:click="guardar_fila">Guardar</button>
          </div>
        </div>
        <div v-else-if="modalidad === 'crear'" style="padding: 4px; padding-top: 0px;">
          <div class="" v-for="columna, columna_index in columnas_locales" v-bind:key="'formulario-columna-'+columna_index">
            <div class="columna_del_formulario" v-if="columna_index !== 'id'">
              <div>{{ $window.utilidades.texto_humanizado_de_columna(root.esquema, tabla_id, columna_index) }}:</div>
              <div v-if="columna_index in columnas_foraneas">
                <ExploradorDeDatos :root="root" es-seleccionable="1" :id-de-tabla="columnas_foraneas[columna_index].tabla_foranea" :al-cambiar="v => fila_nueva[columna_index] = v[0]" />
              </div>
              <div v-else>
                <template v-if="columna.tipo === 'VARCHAR'">
                  <template v-if="$window.utilidades.busco_atributo_en_columna(columna, 'es_opcion')">
                    <select class="entrada_de_formulario" v-model="fila_nueva[columna_index]">
                      <option v-for="opcion, opcion_index in $window.utilidades.busco_atributo_en_columna(columna, 'es_opcion').split('|')" v-bind:key="'tabla-' + tabla.tabla + '-columna-' + columna.columna + '-opcion-' + opcion_index" :value="opcion">
                        {{ opcion }}
                      </option>
                    </select>
                  </template>
                  <template v-else>
                    <input class="entrada_de_formulario" type="text" v-model="fila_nueva[columna_index]" />
                  </template>
                </template>
                <template v-else-if="columna.tipo === 'INTEGER'">
                  <input class="entrada_de_formulario" type="number" v-model="fila_nueva[columna_index]" />
                </template>
                <template v-else-if="columna.tipo === 'REAL'">
                  <input class="entrada_de_formulario" type="number" v-model="fila_nueva[columna_index]" />
                </template>
                <template v-else-if="columna.tipo === 'DATETIME'">
                  <input class="entrada_de_formulario" type="date" v-model="fila_nueva[columna_index]" />
                </template>
                <template v-else>
                  <textarea class="entrada_de_formulario" v-model="fila_nueva[columna_index]"></textarea>
                </template>
              </div>
            </div>
          </div>
          <div class="columna_del_formulario text_align_right" v-if="modalidad === 'crear'">
            <button v-on:click="crear_fila">Crear</button>
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      root: {
        type: Object,
        required: true
      },
      modalidad: {
        type: String,
        default: una funci√≥n donde retorno "editar"
      }
    }.
    m√©todo data() donde {
      retorno {
        tabla: false,
        tabla_id: this.$route.params.id_de_tabla,
        fila: false,
        fila_nueva: {},
        columnas_foraneas: {},
        columnas_locales: {},
        columnas_fichero: {},
        columnas_fichero_cargando: {},
        esta_cambiando_fichero: false
      }.
    }.
    propiedad methods como {
      m√©todo as√≠ncrono buscar_fila () donde {
        creo respuesta_fila como as√≠ncronamente una petici√≥n http
          con url `/api/v1/select/${this.tabla_id}`
          con m√©todo "POST"
          con cuerpo {
            where: [["id","=", this.$route.params.id_de_fila]] textualizado
          }
          con cabeceras { authorization: this.root.token_de_sesion }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_fila, this).
        asigno this.fila como respuesta_fila.data.resultado[0].
      }.
      m√©todo as√≠ncrono guardar_fila () donde {
        creo respuesta_guardar como as√≠ncronamente una petici√≥n http
          con url `/api/v1/update/${this.tabla_id}`
          con m√©todo "POST"
          con cuerpo {
            id: this.$route.params.id_de_fila,
            ...incluyo this.fila
          }
          con cabeceras { authorization: this.root.token_de_sesion }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_guardar, this).
        hago as√≠ncronamente this.buscar_fila().
      }.
      m√©todo as√≠ncrono crear_fila () donde {
        creo respuesta_crear como as√≠ncronamente una petici√≥n http
          con url `/api/v1/insert/${this.tabla_id}`
          con m√©todo "POST"
          con cuerpo {
            ...incluyo this.fila_nueva
          }
          con cabeceras { authorization: this.root.token_de_sesion }.
        si no this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_crear, this) {
          hago this.$router.history.push(`/explorador/${this.tabla_id}`).
        }.
      }.
      m√©todo as√≠ncrono eliminar_fila () donde {
        creo respuesta_eliminar como as√≠ncronamente una petici√≥n http
          con url `/api/v1/delete/${this.tabla_id}`
          con m√©todo "POST"
          con cuerpo {
            id: this.$route.params.id_de_fila
          }
          con cabeceras { authorization: this.root.token_de_sesion }.
        si no this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_eliminar, this) {
          hago this.$router.history.push(`/explorador/${this.tabla_id}`).
        }.
      }.
      m√©todo as√≠ncrono cambiar_fichero (columna_index, evento) donde {
        hago this.desactualizar_imagen(columna_index).
        creo datos_de_formulario como un nuevo FormData().
        creo ficheros_seleccionados como evento.target.files.
        desacoplo constantes [ fichero_seleccionado ] a partir de ficheros_seleccionados.
        hago datos_de_formulario.append("id", this.$route.params.id_de_fila).
        hago datos_de_formulario.append("columna", columna_index).
        hago datos_de_formulario.append("fichero", fichero_seleccionado).
        creo respuesta_cambiar como as√≠ncronamente una petici√≥n http
          con url `/api/v1/setfile/${this.tabla_id}`
          con m√©todo "POST"
          con cuerpo datos_de_formulario
          con cabeceras {
            "Content-Type": "multipart/form-data",
            authorization: this.root.token_de_sesion
          }.
        si no this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_cambiar, this) {
          
        }.
        hago as√≠ncronamente this.actualizar_imagen(columna_index).
      }.
      m√©todo cargar_metadatos_de_tabla donde {
        asigno this.tabla como this.root.esquema.filter(una lambda con (tabla) donde retorno tabla.tabla es igual que this.tabla_id)[0].
        asigno this.columnas_locales como un hecho donde {
          creo columnas_locales como {}.
          desde 0 hasta this.tabla.composicion.length usando indice_componente {
            creo componente como this.tabla.composicion[indice_componente].
            si componente.sentencia es igual que "columna" {
              asigno columnas_locales[componente.columna] como componente.
            }.
          }.
          retorno columnas_locales.
        }.
        asigno this.columnas_foraneas como un hecho donde {
          creo columnas_foraneas como {}.
          desde 0 hasta this.tabla.composicion.length usando indice_componente {
            creo componente como this.tabla.composicion[indice_componente].
            si componente.sentencia es igual que "clave for√°nea" {
              asigno columnas_foraneas[componente.columna] como componente.
            }.
          }.
          retorno columnas_foraneas.
        }.
        asigno this.columnas_fichero como un hecho donde {
          creo columnas_fichero como {}.
          desde 0 hasta this.tabla.atributos.length usando indice_atributo {
            creo atributo como this.tabla.atributos[indice_atributo].
            si atributo es tipo texto y atributo.startsWith("tiene_fichero:") {
              creo columna_fichero como atributo.substr("tiene_fichero:".length).trim().
              asigno columnas_fichero[columna_fichero] como 0.
            }.
          }.
          retorno columnas_fichero.
        }.
      }.
      m√©todo desactualizar_imagen con (columna_index) donde {
        asigno this.columnas_fichero_cargando[columna_index] como true.
        hago this.$forceUpdate(true).
      }.
      m√©todo actualizar_imagen con (columna_index) donde {
        retorno una nueva Promise(una lambda con (ok) donde {
          hago setTimeout(una lambda donde {
            asigno this.columnas_fichero_cargando[columna_index] como false.
            hago this.$forceUpdate(true).
            retorno ok().
          }, 1000).
        }).
      }.
      m√©todo as√≠ncrono refrescar_imagen con (columna_index) donde {
        hago as√≠ncronamente this.desactualizar_imagen(columna_index).
        hago as√≠ncronamente this.actualizar_imagen(columna_index).
      }.
    }.
    m√©todo as√≠ncrono beforeMount donde {
      hago this.cargar_metadatos_de_tabla().
    }.
    m√©todo as√≠ncrono mounted donde {
      hago as√≠ncronamente this.buscar_fila().
    }.
  }.
}.