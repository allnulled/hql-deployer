asigno window.PaginaDeEscuelaParaVerCursos como un componente vue2 con nombre "PaginaDeEscuelaParaVerCursos" con plantilla {
  <div class="PaginaDeEscuelaParaVerCursos Component">
    <div class="window">
      <div class="title-bar">
        <div class="title-bar-text">
          <table class="">
          <tbody>
            <tr>
            <td>
              <span class="partenon" v-on:click="() => $router.history.push('/')">üèõÔ∏è</span>
            </td>
            <td>
              <span class="">Escuela</span>
            </td>
            </tr>
          </tbody>
          </table>
        </div>
      </div>
      <div v-if="root.esquema" class="window-body">
        <BreadcrumbGenerico :root="root" :migas="[{texto:'Inicio',link:'/'}]"></BreadcrumbGenerico>
        <h5>Escuela</h5>
        <div class="panel_principal" style="">
          <div class="panel_de_botones_superior" v-if="es_administrador">
            <button v-on:click="() => ir_a_crear_curso()">‚ûï Crear curso</button>
          </div>
          <template v-if="cursos_de_escuela.length">
            <div class="panel_de_botones_superior">
              <table>
                <tr>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_principio_de_paginacion()"> ¬´¬´ </button>
                  </td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_anterior_de_paginacion()"> ¬´ </button>
                  </td>
                  <td style="width: 100%; text-align: center;">P√°gina {{ pagina }}</td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_posterior_de_paginacion()"> ¬ª </button>
                  </td>
                  <td style="display: none;">
                    <button style="min-width: auto;" v-on:click="() => ir_a_final_de_paginacion()"> ¬ª¬ª </button>
                  </td>
                </tr>
              </table>
            </div>
            <div class="lista_de_cursos">
              <template v-for="curso, curso_index in cursos_de_escuela">
                <div class="curso_en_lista" v-bind:key="'blog-curso-' + curso_index" v-on:click="() => ir_a_curso(curso_index)">
                  <div class="titulo_de_curso">
                  {{ curso.titulo }}
                  </div>
                  <div class="subtitulo_de_curso" v-if="curso.subtitulo">
                  {{ curso.subtitulo }}
                  </div>
                  <div class="fecha_de_creacion_de_curso">
                    Creado el {{ curso.fecha_de_creacion }}
                  </div>
                  <div class="descripcion_de_curso" v-if="curso.descripcion">
                    {{ curso.descripcion }}
                  </div>
                </div>
              </template>
            </div>
            <div class="panel_de_botones_superior">
              <table>
                <tr>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_principio_de_paginacion()"> ¬´¬´ </button>
                  </td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_anterior_de_paginacion()"> ¬´ </button>
                  </td>
                  <td style="width: 100%; text-align: center;">P√°gina {{ pagina }}</td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_posterior_de_paginacion()"> ¬ª </button>
                  </td>
                  <td style="display: none;">
                    <button style="min-width: auto;" v-on:click="() => ir_a_final_de_paginacion()"> ¬ª¬ª </button>
                  </td>
                </tr>
              </table>
            </div>
          </template>
          <div v-else>
            No hay cursos actualmente.
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
        root: {
        type: Object,
        required: true
      }
    }.
    m√©todo data donde {
      debugo "PaginaDeEscuelaParaVerCursos.data".
      retorno {
        pagina: 1,
        es_administrador: false,
        cursos_de_escuela: []
      }.
    }.
    propiedad methods como {
      m√©todo ir_a_crear_curso donde {
        debugo "PaginaDeEscuelaParaVerCursos.ir_a_crear_curso".
        hago this.$router.history.push("/escuela/crear/curso").
      }.
      m√©todo ir_a_curso con (curso_index) donde {
        debugo "PaginaDeEscuelaParaVerCursos.ir_a_curso".
        creo curso como this.cursos_de_escuela[curso_index].
        hago this.$router.history.push(`/escuela/ver/curso/${curso.id}`).
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono ir_a_principio_de_paginacion donde {
        debugo "PaginaDeEscuelaParaVerCursos.ir_a_principio_de_paginacion".
        asigno this.pagina como 1.
        creo resultado como as√≠ncronamente this.obtener_datos().
        hago this.$forceUpdate(true).
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono ir_a_anterior_de_paginacion donde {
        debugo "PaginaDeEscuelaParaVerCursos.ir_a_anterior_de_paginacion".
        si this.pagina es igual que 1 retorno.
        decremento this.pagina.
        creo resultado como as√≠ncronamente this.obtener_datos().
        hago this.$forceUpdate(true).
        si resultado es igual que 0 incremento this.pagina.
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono ir_a_posterior_de_paginacion donde {
        debugo "PaginaDeEscuelaParaVerCursos.ir_a_posterior_de_paginacion".
        incremento this.pagina.
        creo resultado como as√≠ncronamente this.obtener_datos().
        hago this.$forceUpdate(true).
        si resultado es igual que 0 decremento this.pagina.
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono obtener_datos donde {
        debugo "PaginaDeEscuelaParaVerCursos.obtener_datos".
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Curso_de_escuela"
          con m√©todo "POST"
          con cuerpo {
            order: [
              ["id", "desc"]
            ] textualizado,
            page: this.pagina
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_1, this).
        si respuesta_1.data.resultado.length es igual que 0 retorno 0.
        asigno this.cursos_de_escuela como respuesta_1.data.resultado.
        retorno this.cursos_de_escuela.length.
      } en errores hago this.$window.$notificaciones.notificar_error(error).
    }.
    m√©todo as√≠ncrono mounted donde {
      debugo "PaginaDeEscuelaParaVerCursos.mounted".
      en proceso averiguar_si_es_administrador {
        asigno this.es_administrador como this.root.autentificacion.permisos.reduce(una funci√≥n con (salida, permiso) donde {
            si permiso.nombre es igual que "permiso de administraci√≥n" {
              retorno true.
            }.
            retorno salida.
          }, false).
      }.
      en proceso obtener_datos {
        hago as√≠ncronamente this.obtener_datos().
      }.
      hago this.$forceUpdate(true).
    } en errores hago this.$window.$notificaciones.notificar_error(error).
  }.
}.