asigno window.PaginaDeBlogParaVerPosts como un componente vue2 con nombre "PaginaDeBlogParaVerPosts" con plantilla {
  <div class="PaginaDeBlogParaVerPosts Component">
    <div class="window">
      <div class="title-bar">
        <div class="title-bar-text">
          <table class="">
          <tbody>
            <tr>
            <td>
              <span class="partenon" v-on:click="() => $router.history.push('/')">üèõÔ∏è</span>
            </td>
            <td>
              <span class="">Blog</span>
            </td>
            </tr>
          </tbody>
          </table>
        </div>
      </div>
      <div v-if="root.esquema" class="window-body">
        <BreadcrumbGenerico :root="root" :migas="[{texto:'Inicio',link:'/'}]"></BreadcrumbGenerico>
        <h5>Blog</h5>
        <div class="panel_principal" style="">
          <div class="panel_de_botones_superior" v-if="es_administrador">
            <button v-on:click="() => ir_a_crear_post()">‚ûï Crear post</button>
          </div>
          <template v-if="posts_del_blog.length">
            <div class="panel_de_botones_superior">
              <table>
                <tr>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_principio_de_paginacion()"> ¬´¬´ </button>
                  </td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_anterior_de_paginacion()"> ¬´ </button>
                  </td>
                  <td style="width: 100%; text-align: center;">P√°gina {{ pagina }}</td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_posterior_de_paginacion()"> ¬ª </button>
                  </td>
                  <td style="display: none;">
                    <button style="min-width: auto;" v-on:click="() => ir_a_final_de_paginacion()"> ¬ª¬ª </button>
                  </td>
                </tr>
              </table>
            </div>
            <div class="lista_de_posts">
              <template v-for="post, post_index in posts_del_blog">
                <div class="post_en_lista" v-bind:key="'blog-post-' + post_index" v-on:click="() => ir_a_post(post_index)">
                  <div class="titulo_de_post">
                  {{ post.titulo }}
                  </div>
                  <div class="subtitulo_de_post" v-if="post.subtitulo">
                  {{ post.subtitulo }}
                  </div>
                  <div class="autor_de_post">
                    Escrito el {{ post.fecha_de_creacion }} por ¬´{{ autores[post.id_de_autor].nombre }}¬ª
                  </div>
                  <div class="contenido_de_post" v-if="post.contenido">
                    {{ post.contenido.substr(0, 50) }}...
                  </div>
                  <div class="tags_de_post">
                    Tags: {{ post.tags }}
                  </div>
                </div>
              </template>
            </div>
            <div class="panel_de_botones_superior">
              <table>
                <tr>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_principio_de_paginacion()"> ¬´¬´ </button>
                  </td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_anterior_de_paginacion()"> ¬´ </button>
                  </td>
                  <td style="width: 100%; text-align: center;">P√°gina {{ pagina }}</td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_posterior_de_paginacion()"> ¬ª </button>
                  </td>
                  <td style="display: none;">
                    <button style="min-width: auto;" v-on:click="() => ir_a_final_de_paginacion()"> ¬ª¬ª </button>
                  </td>
                </tr>
              </table>
            </div>
          </template>
          <div v-else>
            No hay posts en el blog.
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
        root: {
        type: Object,
        required: true
      }
    }.
    m√©todo data donde {
      debugo "PaginaDeBlogParaVerPosts.data".
      retorno {
        pagina: 1,
        es_administrador: false,
        posts_del_blog: [],
        autores: {}
      }.
    }.
    propiedad methods como {
      m√©todo ir_a_crear_post donde {
        debugo "PaginaDeBlogParaVerPosts.ir_a_crear_post".
        hago this.$router.history.push("/blog/crear/post").
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo ir_a_post con (post_index) donde {
        debugo "PaginaDeBlogParaVerPosts.ir_a_post".
        creo post como this.posts_del_blog[post_index].
        hago this.$router.history.push(`/blog/ver/post/${post.id}`).
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono ir_a_principio_de_paginacion donde {
        debugo "PaginaDeBlogParaVerPosts.ir_a_principio_de_paginacion".
        asigno this.pagina como 1.
        creo resultado como as√≠ncronamente this.obtener_datos().
        hago this.$forceUpdate(true).
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono ir_a_anterior_de_paginacion donde {
        debugo "PaginaDeBlogParaVerPosts.ir_a_anterior_de_paginacion".
        si this.pagina es igual que 1 retorno.
        decremento this.pagina.
        creo resultado como as√≠ncronamente this.obtener_datos().
        hago this.$forceUpdate(true).
        si resultado es igual que 0 incremento this.pagina.
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono ir_a_posterior_de_paginacion donde {
        debugo "PaginaDeBlogParaVerPosts.ir_a_posterior_de_paginacion".
        incremento this.pagina.
        creo resultado como as√≠ncronamente this.obtener_datos().
        hago this.$forceUpdate(true).
        si resultado es igual que 0 decremento this.pagina.
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono obtener_datos donde {
        debugo "PaginaDeBlogParaVerPosts.obtener_datos".
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Post_de_blog"
          con m√©todo "POST"
          con cuerpo {
            order: [
              ["id", "desc"]
            ] textualizado,
            page: this.pagina
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_1, this).
        si respuesta_1.data.resultado.length es igual que 0 retorno 0.
        creo datos_1 como respuesta_1.data.resultado.sort(una funci√≥n con (a, b) donde {
          si a.id es menor que b.id {
            retorno 1.
          }.
          si a.id es mayor que b.id {
            retorno 0-1.
          }.
          retorno 0.
        }).
        creo ids_de_autores como datos_1.map(una funci√≥n con (post_de_blog) donde {
          retorno post_de_blog.id_de_autor.
        }).reduce(una funci√≥n con (salida, id_de_autor) donde {
          si salida.indexOf(id_de_autor) es igual que 0-1 {
            hago salida.push(id_de_autor).
          }.
          retorno salida.
        }, []).
        creo respuesta_2 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Usuario"
          con m√©todo "POST"
          con cuerpo {
            where: [
              ["id", "in", ids_de_autores.join(";")]
            ] textualizado
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_2, this).
        creo datos_2 como respuesta_2.data.resultado.
        creo datos_2_mapeado como datos_2.reduce(una funci√≥n con (salida, autor) donde {
          asigno salida[autor.id] como autor.
          retorno salida.
        }, {}).
        asigno this.posts_del_blog como datos_1.
        asigno this.autores como datos_2_mapeado.
        retorno this.posts_del_blog.length.
      } en errores hago this.$window.$notificaciones.notificar_error(error).
    }.
    m√©todo as√≠ncrono mounted donde {
      debugo "PaginaDeBlogParaVerPosts.mounted".
      en proceso averiguar_si_es_administrador {
        asigno this.es_administrador como this.root.autentificacion.permisos.reduce(una funci√≥n con (salida, permiso) donde {
            si permiso.nombre es igual que "permiso de administraci√≥n" {
              retorno true.
            }.
            retorno salida.
          }, false).
      }.
      en proceso obtener_datos {
        hago as√≠ncronamente this.obtener_datos().
      }.
      hago this.$forceUpdate(true).
    } en errores hago this.$window.$notificaciones.notificar_error(error).
  }.
}.