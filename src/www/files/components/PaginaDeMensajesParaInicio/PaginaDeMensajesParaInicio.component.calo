asigno window.PaginaDeMensajesParaInicio como un componente vue2 con nombre "PaginaDeMensajesParaInicio" con plantilla {
  <div class="PaginaDeMensajesParaInicio Component">
    <div class="window">
      <div class="title-bar">
        <div class="title-bar-text">
          <table class="">
            <tbody>
              <tr>
                <td>
                  <span class="partenon" v-on:click="() => $router.history.push('/')">üèõÔ∏è</span>
                </td>
                <td>
                  <span class="">Mensajes</span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div v-if="root.esquema" class="window-body">
        <BreadcrumbGenerico :root="root" :migas="[{texto:'Inicio',link:'/'}]"></BreadcrumbGenerico>
        <h5>Mensajes</h5>
        <div style="padding-left: 4px; padding-right: 4px;">
          <div class="panel_de_botones_superior">
            <button v-on:click="() => ir_a_redactar_mensaje()">üìÑ Redactar mensaje</button>
          </div>
          <div class="panel_de_mensajes" v-if="(pagina === 1) && (mensajes.length === 0)">
            <div>No hay mensajes.</div>
          </div>
          <div v-else>
            <div class="panel_de_botones_superior">
              <table>
                <tr>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_principio_de_paginacion()"> ¬´¬´ </button>
                  </td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_anterior_de_paginacion()"> ¬´ </button>
                  </td>
                  <td style="width: 100%; text-align: center;">P√°gina {{ pagina }}</td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_posterior_de_paginacion()"> ¬ª </button>
                  </td>
                  <td style="display: none;">
                    <button style="min-width: auto;" v-on:click="() => ir_a_final_de_paginacion()"> ¬ª¬ª </button>
                  </td>
                </tr>
              </table>
            </div>
            <div class="panel_de_mensajes" v-if="mensajes.length">
              <div class="lista_de_mensajes">
                <table class="tabla_de_mensajes">
                  <tr>
                    <th class="">
                      ID
                    </th>
                    <th class="">
                      Asunto
                    </th>
                    <th class="">
                      Usuario origen
                    </th>
                    <th class="">
                      Fecha de creaci√≥n
                    </th>
                  </tr>
                  <tr class="fila_de_mensaje" v-for="mensaje, mensaje_index in mensajes" v-bind:key="'mensajes-mensaje-' + mensaje_index" v-on:click="() => ir_a_ver_mensaje(mensaje.id)">
                    <td class="mensaje_id">
                      {{ mensaje.id }}
                    </td>
                    <td class="mensaje_asunto">
                      {{ mensaje.asunto }}
                    </td>
                    <td class="mensaje_usuario_origen">
                      {{ usuarios_de_mensajes[mensaje.id_de_usuario_origen].nombre }}
                    </td>
                    <td class="mensaje_fecha_de_creacion">
                      {{ mensaje.fecha_de_creacion }}
                    </td>
                  </tr>
                </table>
              </div>
            </div>
            <div class="panel_de_botones_superior">
              <table>
                <tr>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_principio_de_paginacion()"> ¬´¬´ </button>
                  </td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_anterior_de_paginacion()"> ¬´ </button>
                  </td>
                  <td style="width: 100%; text-align: center;">P√°gina {{ pagina }}</td>
                  <td>
                    <button style="min-width: auto;" v-on:click="() => ir_a_posterior_de_paginacion()"> ¬ª </button>
                  </td>
                  <td style="display: none;">
                    <button style="min-width: auto;" v-on:click="() => ir_a_final_de_paginacion()"> ¬ª¬ª </button>
                  </td>
                </tr>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      root: {
        type: Object,
        required: true
      }
    }.
    m√©todo data donde {
      debugo "PaginaDeMensajesParaInicio.data".
      retorno {
        mensajes: [],
        usuarios_de_mensajes: {},
        pagina: 1
      }.
    } en errores hago this.$window.$notificaciones.notificar_error(error).
    propiedad methods como {
      m√©todo as√≠ncrono ir_a_principio_de_paginacion donde {
        debugo "PaginaDeForoParaVerPosts.ir_a_principio_de_paginacion".
        asigno this.pagina como 1.
        creo resultado como as√≠ncronamente this.obtener_mensajes().
        hago this.$forceUpdate(true).
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono ir_a_anterior_de_paginacion donde {
        debugo "PaginaDeForoParaVerPosts.ir_a_anterior_de_paginacion".
        si this.pagina es igual que 1 retorno.
        decremento this.pagina.
        creo resultado como as√≠ncronamente this.obtener_mensajes().
        hago this.$forceUpdate(true).
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo as√≠ncrono ir_a_posterior_de_paginacion donde {
        debugo "PaginaDeForoParaVerPosts.ir_a_posterior_de_paginacion".
        si this.mensajes.length no es igual que 20 retorno.
        incremento this.pagina.
        creo resultado como as√≠ncronamente this.obtener_mensajes().
        si resultado es igual que 0 decremento this.pagina.
        hago this.$forceUpdate(true).
      } en errores hago this.$window.$notificaciones.notificar_error(error).
      m√©todo ir_a_redactar_mensaje donde {
        debugo "PaginaDeMensajesParaInicio.ir_a_redactar_mensaje".
        hago this.$router.history.push("/mensajes/crear/mensaje").
      }.
      m√©todo as√≠ncrono ir_a_ver_mensaje con (id_mensaje) donde {
        hago this.$router.history.push("/mensajes/ver/mensaje/" + id_mensaje).
      }.
      m√©todo as√≠ncrono obtener_mensajes donde {
        creo respuesta_1 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Mensaje_de_mensajeria"
          con m√©todo "POST"
          con cuerpo {
            page: this.pagina,
            order: [
              ["id", "DESC"]
            ] textualizado
          }
          con cabeceras {
            authorization: this.root.token_de_sesion
          }.
        imprimo respuesta_1.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_1, this).
        si respuesta_1.data.resultado.length es igual que 0 retorno 0.
        creo ids_de_usuario como respuesta_1.data.resultado.reduce(una funci√≥n con (salida, mensaje) donde {
          si salida.indexOf(mensaje.id_de_usuario_origen) es igual que 0-1 {
            hago salida.push(mensaje.id_de_usuario_origen).
          }.
          retorno salida.
        }, []).
        creo respuesta_2 como as√≠ncronamente una petici√≥n http
          con url "/api/v1/select/Usuario"
          con m√©todo "POST"
          con cuerpo {
            where: [
              ["id", "IN", ids_de_usuario.join(";")]
            ] textualizado
          }.
        hago this.$window.utilidades.gestion_de_error_desde_respuesta(respuesta_2, this).
        creo usuarios como respuesta_2.data.resultado.reduce(una funci√≥n con (salida, usuario) donde {
          asigno salida[usuario.id] como usuario.
          retorno salida.
        }, {}).
        asigno this.usuarios_de_mensajes como usuarios.
        asigno this.mensajes como respuesta_1.data.resultado.
        hago this.$forceUpdate(true).
        retorno this.mensajes.length.
      } en errores hago this.$window.$notificaciones.notificar_error(error).
    }.
    m√©todo as√≠ncrono mounted donde {
      hago this.obtener_mensajes().
    } en errores hago this.$window.$notificaciones.notificar_error(error).
  }.
}.